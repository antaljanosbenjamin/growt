################################################################################
# CMakeLists.txt
#
# Root CMake build script for growt.
#
# Part of Project growt - https://github.com/TooBiased/growt.git
#
# Copyright (C) 2015-2016 Tobias Maier <t.maier@kit.edu>
#
# All rights reserved. Published under the BSD-2 license in the LICENSE file.
################################################################################

cmake_minimum_required (VERSION 2.8)

# custom cmake scripts
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake)

project (concurrent-growtable)


# prohibit in-source builds
if("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
  message(SEND_ERROR "In-source builds are not allowed.")
endif()

option(GROWT_BUILD_TSX
  "(optional) builds tests using TSX optimized hash tables." OFF)

option(GTOWT_BUILD_ALTERNATE_VARIANT
  "(optional) builds another variant of our synchroneously growing hash tables (usnGrow and psnGrow)." OFF)

option(GROWT_BUILD_ALL_THIRD_PARTIES
  "(optional) builds tests for third party hash tables." ON)

option(GROWT_BUILD_FOLLY
  "(optional) builds tests for folly (using a wrapper)!" OFF)
option(GROWT_BUILD_CUCKOO
  "(optional) builds tests for libcuckoo (using a wrapper)!" OFF)
option(GROWT_BUILD_TBB
  "(optional) builds tests for tbb hash map and unordered map (using wrappers)!" OFF)
option(GROWT_BUILD_JUNCTION
  "(optional) builds tests for junction tables (Linear, Grampa, Leapfrog)!" OFF)
option(GROWT_BUILD_LEGACY
  "(optional) builds tests for legacy tables (Julian Shun's Implementation, LeaHash, URCU, Hopscotch) only possible in the appropriate branch!" ON)

set(GROWT_ALLOCATOR ALIGNED CACHE STRING
  "Specifies the used allocator (only relevant for our tables)!")
set_property(CACHE GROWT_ALLOCATOR PROPERTY STRINGS ALIGNED POOL NUMA_POOL HTLB_POOL)

set(GROWT_ALLOCATOR_POOL_SIZE 2 CACHE STRING
  "Size of preallocated memory pool (only relevant for pool allocators)!")
if (NOT GROWT_ALLOCATOR_POOL_SIZE MATCHES "^[0-9]+$")
  message(FATAL_ERROR "GROWT_ALLOCATOR_POOL_SIZE must be a numeric argument")
endif()

set(GROWT_HASHFCT XXHASH CACHE STRING
  "Changes the used hash function if XXHASH is not available, MURMUR2 is used as backoff!")
set_property(CACHE GROWT_HASHFCT PROPERTY STRINGS XXHASH MURMUR2 MURMUR3 CRC)

if (GROWT_BUILD_ALL_THIRD_PARTIES)
  set(GROWT_BUILD_FOLLY    ON)
  set(GROWT_BUILD_CUCKOO   ON)
  set(GROWT_BUILD_TBB      ON)
  set(GROWT_BUILD_JUNCTION ON)
endif()

###TEMPORARY (CURRENTLY NOT USED)
set (GROWT_MAX_FILL 0.6)


set (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++1y -g -O2")

# set (CMAKE_CXX_FLAGS
#   "${CMAKE_CXX_FLAGS} -std=c++1y -g -msse4.2 -mcx16 -Wall -Wextra -O3")

set (FLAGS            "-msse4.2 -mcx16 -Wall -Wextra -O3")
set (FLAGS_NO_WARNING "-msse4.2 -mcx16 -O3")

include_directories(.)

if (GROWT_ALLOCATOR STREQUAL POOL OR
    GROWT_ALLOCATOR STREQUAL NUMA_POOL OR
    GROWT_ALLOCATOR STREQUAL HTLB_POOL)
  set (USE_TBB_MEMPOOL ON)
endif()



# find pthread
find_package(Threads REQUIRED)
set(TEST_DEP_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} ${TEST_DEP_LIBRARIES})



# COMPILE THE EXAMPLE CODE (example/example.cpp)
add_executable(example example/example.cpp)
set_target_properties(example PROPERTIES COMPILE_FLAGS "${FLAGS}")
target_link_libraries(example ${TEST_DEP_LIBRARIES})


# if necessary find tbb
if (USE_TBB_MEMPOOL OR GROWT_BUILD_TBB)
  find_package(TBB)

  if (NOT TBB_FOUND)
    message("Intel TBB not found. "
      "memPool cannot be used and TBB-Tests cannot be created!")
    set(GROWT_BUILD_TBB OFF)
    if (USE_TBB_MEMPOOL)
      message(STATUS "Switch to aligned alloc!")
      set(GROWT_ALLOCATOR ALIGNED)
    endif()
  elseif(TBB_INTERFACE_VERSION LESS 8000)
    message("Intel TBB ${TBB_INTERFACE_VERSION} is too old. "
      "ThreadPool cannot be used and TBB-Tests cannot be created!")
    set(GROWT_BUILD_TBB OFF)
    if (USE_TBB_MEMPOOL)
      message(STATUS "Switch to aligned alloc!")
      set(GROWT_ALLOCATOR ALIGNED)
    endif()
  else()
    include_directories(STATUS ${TBB_INCLUDE_DIRS})
    link_directories(${TBB_LIBRARY_DIRS})
    if (USE_TBB_MEMPOOL)
      set(ALLOC_LIB ${TBB_LIBRARIES})
    endif()
  endif()
endif()

if (GROWT_ALLOCATOR STREQUAL NUMA_POOL)
  find_package(NUMA)
  if (NOT NUMA_FOUND)
    message("Cannot find libnuma. "
      "Therefore, a normal pool allocator will be used!")
    set(GROWT_ALLOCATOR POOL)
  else()
    include_directories(SYSTEM &{NUMA_INCLUDE_DIRS})
    #message(STATUS "${NUMA_LIBRARIES}")
    link_directories(${NUMA_LIBRARY_DIRS})
    set(ALLOC_LIB ${ALLOC_LIB} ${NUMA_LIBRARIES})
  endif()
endif()



##### SUBMODULE FINDS ##########################################################

if (GROWT_BUILD_CUCKOO)
  message(STATUS "Looking for libcuckoo.")

  find_path(CUCKOO_DIR libcuckoo/CMakeLists.txt
    PATHS HINTS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
      #PATHS ENV PATH ENV CUCKOO_ROOT)

  if (CUCKOO_DIR)
    add_subdirectory(${CUCKOO_DIR}/libcuckoo libcuckoo)
    message(STATUS ${CUCKOO_DIR})
    include_directories(${CUCKOO_DIR}/libcuckoo)
    #set(JUNCTIONLIST "junction_linear;junction_grampa;junction_leapfrog")
    message(STATUS "Looking for libcuckoo -- found")
  else()
    message(STATUS "Looking for libcuckoo -- not found")
    message("Cannot find libcuckoo root directory. "
      "Therefore, Cuckoo-Tests cannot be created!")
    set(GROWT_BUILD_CUCKOO OFF)
  endif()
endif()


if (GROWT_BUILD_JUNCTION)
  message(STATUS "Looking for junction")

  find_path(JUNCTION_DIR junction/CMakeLists.txt
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
      #PATHS ENV PATH ENV JUNCTION_ROOT)

  if (JUNCTION_DIR)
    add_subdirectory(${JUNCTION_DIR}/junction junction)
    include_directories(${JUNCTION_ALL_INCLUDE_DIRS})
    #set(JUNCTIONLIST "junction_linear;junction_grampa;junction_leapfrog")
    message(STATUS "Looking for junction -- found")
  else()
    message(STATUS "Looking for junction -- not found")
    message("Cannot find junction root directory. "
      "Therefore, Junction-Tests cannot be created!")
    set(GROWT_BUILD_JUNCTION OFF)
  endif()
endif()


if (GROWT_BUILD_FOLLY)
  message(STATUS "Looking for folly")

  # NECESSARY FOR SOME REASON
  include(CheckIncludeFileCXX)

  find_path(FOLLY_DIR folly/CMakeLists.txt
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
      #PATHS ENV PATH ENV JUNCTION_ROOT)

  if (FOLLY_DIR)
    add_subdirectory(${FOLLY_DIR}/folly folly)
    include_directories(${FOLLY_DIR}/folly)
    message(STATUS "Looking for folly -- found")
  else()
    message(STATUS "Looking for folly -- not found")
    message("Cannot find folly root directory. "
      "Therefore, Folly-Tests cannot be created!")
    set(GROWT_BUILD_FOLLY OFF)
  endif()
endif()

if (GROWT_BUILD_LEGACY)
  message(STATUS "Looking for Hopscotch/LeaHash")
  find_path(HOPSCOTCH_DIR ConcurrentHopscotchHashMap/data_structures/BitmapHopscotchHashMap.h
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules/)
  if (HOPSCOTCH_DIR)
    message(STATUS "Looking for Hopscotch/LeaHash -- found")
    set(HOPSCOTCH_INCLUDE ${HOPSCOTCH_DIR}/ConcurrentHopscotchHashMap/data_structures/)
    include_directories(${HOPSCOTCH_INCLUDE})
  else()
    message(STATUS "Looking for Hopscotch/LeaHash -- not found")
    message("Cannot find Hopscotch/LeaHash. Therefore, some tests cannot be created! Download their code into the submodules folder!")
  endif()

  message(STATUS "Looking for Shun's Table")
  find_path(SHUN_DIR      shun/deterministicHash.h
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
  if (SHUN_DIR)
    message(STATUS "Looking for Shun's Table -- found")
    set(SHUN_INCLUDE ${SHUN_DIR}/shun/)
    include_directories(${SHUN_INCLUDE})
  else()
    message(STATUS "Looking for Shun's Table -- not found")
    message("Cannot find Shun's Table. Therefore, some tests cannot be created! Download their code into the submodules/shun folder!")
  endif()

   message(STATUS "Looking for Shun's nd Table")
  find_path(SHUN_ND_DIR      shun_nd/ndHash.h
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
  if (SHUN_ND_DIR)
    message(STATUS "Looking for Shun's nd Table -- found")
    set(SHUN_ND_INCLUDE ${SHUN_ND_DIR}/shun_nd/)
    include_directories(${SHUN_ND_INCLUDE})
  else()
    message(STATUS "Looking for Shun's nd Table -- not found")
    message("Cannot find Shun's Table. Therefore, some tests cannot be created! Download their code into the submodules/shun_nd folder!")
  endif()

  message(STATUS "Looking for urcu package")
  find_path(URCU_DIR      userspace-rcu/install/include/urcu/rculfhash.h
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
  if (URCU_DIR)
    message(STATUS "Looking for urcu package -- found")
    set(URCU_INCLUDE ${URCU_DIR}/userspace-rcu/install/include/)
    include_directories(${URCU_INCLUDE})
    set(URCU_LIBRARIES -lurcu -lurcu-cds
      -L${URCU_DIR}/userspace-rcu/install/lib/
      -Wl,-rpath,${URCU_DIR}/userspace-rcu/install/lib)
    set(URCU_QSBR_LIBRARIES -lurcu-qsbr -lurcu-cds
      -L${URCU_DIR}/userspace-rcu/install/lib/
      -Wl,-rpath,${URCU_DIR}/userspace-rcu/install/lib)
  else()
    message(STATUS "Looking for urcu package -- not found")
    message("Cannot find userspace rcu implementation. Therefore, some tests cannot be created! Download compile and install their code into the submodules/userspace-rcu folder!")
  endif()
endif()

if (GROWT_HASHFCT STREQUAL XXHASH)
  message(STATUS "Looking for xxhash")

  find_path(XXHASH_DIR xxhash/xxhash.h
    PATHS ${CMAKE_CURRENT_SOURCE_DIR}/misc/submodules)
      #ENV ${CMAKE_CURRENT_SOURCE_DIR}/submodules) #ENV PATH ENV JUNCTION_ROOT)

  if (XXHASH_DIR)
    include_directories(${XXHASH_DIR}/xxhash)
    message(STATUS "Looking for xxhash -- found")
  else()
    message(STATUS "Looking for xxhash -- not found")
    message("Cannot find xxHash. Use MURMUR2 instead.")
    set(GROWT_HASHFCT MURMUR2)
  endif()
endif()

configure_file ("misc/growt_config.h.in" "${PROJECT_BINARY_DIR}/growt_config.h")
include_directories(${PROJECT_BINARY_DIR})

#add_executable(malloc malloc_count.c)


function( GrowTExecutable variant cpp directory name )
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${directory})
  add_executable(${name} tests/${cpp}.cpp)
  set_target_properties(${name} PROPERTIES COMPILE_FLAGS "${FLAGS}")
  target_compile_definitions(${name} PRIVATE
    -D ${variant}
    -D ${GROWT_HASHFCT}
    -D ${GROWT_ALLOCATOR}
    -D GROWT_USE_CONFIG)
  target_link_libraries(${name} ${TEST_DEP_LIBRARIES} ${ALLOC_LIB})
endfunction( GrowTExecutable )


GrowTExecutable( FOLKLORE ins_test ins ins_folklore )
GrowTExecutable( FOLKLORE mix_test mix mix_folklore )
GrowTExecutable( FOLKLORE con_test con con_folklore )
GrowTExecutable( FOLKLORE agg_test agg agg_folklore )

GrowTExecutable( UAGROW ins_test ins ins_uaGrowT )
GrowTExecutable( USGROW ins_test ins ins_usGrowT )
GrowTExecutable( PAGROW ins_test ins ins_paGrowT )
GrowTExecutable( PSGROW ins_test ins ins_psGrowT )
GrowTExecutable( UAGROW mix_test mix mix_uaGrowT )
GrowTExecutable( USGROW mix_test mix mix_usGrowT )
GrowTExecutable( PAGROW mix_test mix mix_paGrowT )
GrowTExecutable( PSGROW mix_test mix mix_psGrowT )
GrowTExecutable( UAGROW del_test del del_uaGrowT )
GrowTExecutable( USGROW del_test del del_usGrowT )
GrowTExecutable( PAGROW del_test del del_paGrowT )
GrowTExecutable( PSGROW del_test del del_psGrowT )
GrowTExecutable( UAGROW con_test con con_uaGrowT )
GrowTExecutable( USGROW con_test con con_usGrowT )
GrowTExecutable( PAGROW con_test con con_paGrowT )
GrowTExecutable( PSGROW con_test con con_psGrowT )
GrowTExecutable( UAGROW agg_test agg agg_uaGrowT )
GrowTExecutable( USGROW agg_test agg agg_usGrowT )
GrowTExecutable( PAGROW agg_test agg agg_paGrowT )
GrowTExecutable( PSGROW agg_test agg agg_psGrowT )

if (GTOWT_BUILD_ALTERNATE_VARIANT)
  GrowTExecutable( USNGROW ins_test ins ins_usnGrowT )
  GrowTExecutable( PSNGROW ins_test ins ins_psnGrowT )
  GrowTExecutable( USNGROW mix_test mix mix_usnGrowT )
  GrowTExecutable( PSNGROW mix_test mix mix_psnGrowT )
  GrowTExecutable( USNGROW del_test del del_usnGrowT )
  GrowTExecutable( PSNGROW del_test del del_psnGrowT )
  GrowTExecutable( USNGROW con_test con con_usnGrowT )
  GrowTExecutable( PSNGROW con_test con con_psnGrowT )
  GrowTExecutable( USNGROW agg_test agg agg_usnGrowT )
  GrowTExecutable( PSNGROW agg_test agg agg_psnGrowT )
endif()

if (GROWT_BUILD_TSX)
  GrowTExecutable( XFOLKLORE ins_test ins ins_xfolklore )
  GrowTExecutable( XFOLKLORE mix_test mix mix_xfolklore )
  GrowTExecutable( XFOLKLORE con_test con con_xfolklore )
  GrowTExecutable( XFOLKLORE agg_test agg agg_xfolklore )
  GrowTExecutable( UAXGROW ins_test ins ins_uaxGrowT )
  GrowTExecutable( USXGROW ins_test ins ins_usxGrowT )
  GrowTExecutable( PAXGROW ins_test ins ins_paxGrowT )
  GrowTExecutable( PSXGROW ins_test ins ins_psxGrowT )
  GrowTExecutable( UAXGROW mix_test mix mix_uaxGrowT )
  GrowTExecutable( USXGROW mix_test mix mix_usxGrowT )
  GrowTExecutable( PAXGROW mix_test mix mix_paxGrowT )
  GrowTExecutable( PSXGROW mix_test mix mix_psxGrowT )
  GrowTExecutable( UAXGROW del_test del del_uaxGrowT )
  GrowTExecutable( USXGROW del_test del del_usxGrowT )
  GrowTExecutable( PAXGROW del_test del del_paxGrowT )
  GrowTExecutable( PSXGROW del_test del del_psxGrowT )
  GrowTExecutable( UAXGROW con_test con con_uaxGrowT )
  GrowTExecutable( USXGROW con_test con con_usxGrowT )
  GrowTExecutable( PAXGROW con_test con con_paxGrowT )
  GrowTExecutable( PSXGROW con_test con con_psxGrowT )
  GrowTExecutable( UAXGROW agg_test agg agg_uaxGrowT )
  GrowTExecutable( USXGROW agg_test agg agg_usxGrowT )
  GrowTExecutable( PAXGROW agg_test agg agg_paxGrowT )
  GrowTExecutable( PSXGROW agg_test agg agg_psxGrowT )

  if (GTOWT_BUILD_ALTERNATE_VARIANT)
    GrowTExecutable( USNXGROW ins_test ins ins_usnxGrowT )
    GrowTExecutable( PSNXGROW ins_test ins ins_psnxGrowT )
    GrowTExecutable( USNXGROW mix_test mix mix_usnxGrowT )
    GrowTExecutable( PSNXGROW mix_test mix mix_psnxGrowT )
    GrowTExecutable( USNXGROW del_test del del_usnxGrowT )
    GrowTExecutable( PSNXGROW del_test del del_psnxGrowT )
    GrowTExecutable( USNXGROW con_test con con_usnxGrowT )
    GrowTExecutable( PSNXGROW con_test con con_psnxGrowT )
    GrowTExecutable( USNXGROW agg_test agg agg_usnxGrowT )
    GrowTExecutable( PSNXGROW agg_test agg agg_psnxGrowT )
  endif()
endif()

if (GROWT_BUILD_LEGACY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_hopscotch tests/ins_test.cpp)
  set_target_properties(ins_hopscotch PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_hopscotch PRIVATE
    -D HOPSCOTCH -D${GROWT_HASHFCT})
  target_link_libraries(ins_hopscotch ${TEST_DEP_LIBRARIES})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_leahash tests/ins_test.cpp)
  set_target_properties(ins_leahash PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_leahash PRIVATE
    -D LEAHASH -D${GROWT_HASHFCT})
  target_link_libraries(ins_leahash ${TEST_DEP_LIBRARIES})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_shunhash tests/ins_test.cpp)
  set_target_properties(ins_shunhash PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_shunhash PRIVATE
    -D SHUNHASH -D${GROWT_HASHFCT})
  target_link_libraries(ins_shunhash ${TEST_DEP_LIBRARIES})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_shunhash_nd tests/ins_test.cpp)
  set_target_properties(ins_shunhash_nd PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_shunhash_nd PRIVATE
    -D SHUNHASH -D${GROWT_HASHFCT} -D SHUN_ND)
  target_link_libraries(ins_shunhash_nd ${TEST_DEP_LIBRARIES})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_rcu_base tests/ins_test.cpp)
  set_target_properties(ins_rcu_base PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_rcu_base PRIVATE
    -D RCU_BASE -D${GROWT_HASHFCT})
  target_link_libraries(ins_rcu_base ${TEST_DEP_LIBRARIES} ${URCU_LIBRARIES})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ins)
  add_executable(ins_rcu_qsbr tests/ins_test.cpp)
  set_target_properties(ins_rcu_qsbr PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
  target_compile_definitions(ins_rcu_qsbr PRIVATE
    -D RCU_BASE -D${GROWT_HASHFCT} -D QSBR)
  target_link_libraries(ins_rcu_qsbr ${TEST_DEP_LIBRARIES} ${URCU_QSBR_LIBRARIES})
endif()

if (GROWT_BUILD_TBB)
  function( TBBExecutable variant cpp directory name )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${directory})
    add_executable(${name} tests/${cpp}.cpp)
    set_target_properties(${name} PROPERTIES COMPILE_FLAGS "${FLAGS}")
    target_compile_definitions(${name} PRIVATE
      -D ${variant}
      -D ${GROWT_HASHFCT})
    target_link_libraries( ${name} ${TEST_DEP_LIBRARIES} ${TBB_LIBRARIES} )
  endfunction( TBBExecutable )

  TBBExecutable( TBBHM  ins_test ins ins_TBB_hm )
  TBBExecutable( TBBUM  ins_test ins ins_TBB_um )
  TBBExecutable( TBBHM  mix_test mix mix_TBB_hm )
  TBBExecutable( TBBUM  mix_test mix mix_TBB_um )
  TBBExecutable( TBBHM  con_test con con_TBB_hm )
  TBBExecutable( TBBUM  con_test con con_TBB_um )
  TBBExecutable( TBBHM  agg_test agg agg_TBB_hm )
  TBBExecutable( TBBUM  agg_test agg agg_TBB_um )
endif()

if (GROWT_BUILD_FOLLY)
  function( FollyExecutable variant cpp directory name )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${directory})

    add_executable(${name} tests/${cpp}.cpp  )
    set_target_properties(${name} PROPERTIES COMPILE_FLAGS "-O2")
    target_compile_definitions(${name} PRIVATE
      -D ${variant}
      -D ${GROWT_HASHFCT})
    target_link_libraries( ${name} ${TEST_DEP_LIBRARIES} folly libglog.so )
  endfunction( FollyExecutable )

  FollyExecutable( FOLLY  ins_test ins ins_folly )
  FollyExecutable( FOLLY  mix_test mix mix_folly )
  FollyExecutable( FOLLY  con_test con con_folly )
  FollyExecutable( FOLLY  agg_test agg agg_folly )
endif()

if (GROWT_BUILD_CUCKOO)
  function( CuckooExecutable variant cpp directory name )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${directory})
    add_executable(${name} tests/${cpp}.cpp)
    set_target_properties(${name} PROPERTIES COMPILE_FLAGS "${FLAGS}")
    target_compile_definitions(${name} PRIVATE
      -D ${variant}
      -D ${GROWT_HASHFCT})
    target_link_libraries( ${name} ${TEST_DEP_LIBRARIES} ${CUCKOO_LIBRARIES} )
  endfunction( CuckooExecutable )

  CuckooExecutable( CUCKOO  ins_test ins ins_cuckoo )
  CuckooExecutable( CUCKOO  mix_test mix mix_cuckoo )
  CuckooExecutable( CUCKOO  con_test con con_cuckoo )
  CuckooExecutable( CUCKOO  agg_test agg agg_cuckoo )
endif()

if (GROWT_BUILD_JUNCTION)
  function( JunctionExecutable variant cpp directory name )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${directory})
    add_executable(${name} tests/${cpp}.cpp)
    set_target_properties(${name} PROPERTIES COMPILE_FLAGS "${FLAGS_NO_WARNING}")
    target_compile_definitions(${name} PRIVATE
      -D ${variant}
      -D ${GROWT_HASHFCT})
    target_link_libraries( ${name} ${TEST_DEP_LIBRARIES} ${JUNCTION_ALL_LIBRARIES} )
  endfunction( JunctionExecutable )

  JunctionExecutable( JUNCTION_LINEAR  ins_test ins ins_junction_linear )
  JunctionExecutable( JUNCTION_LINEAR  mix_test mix mix_junction_linear )
  JunctionExecutable( JUNCTION_LINEAR  con_test con con_junction_linear )
  JunctionExecutable( JUNCTION_LINEAR  agg_test agg agg_junction_linear )
  JunctionExecutable( JUNCTION_GRAMPA  ins_test ins ins_junction_grampa )
  JunctionExecutable( JUNCTION_GRAMPA  mix_test mix mix_junction_grampa )
  JunctionExecutable( JUNCTION_GRAMPA  con_test con con_junction_grampa )
  JunctionExecutable( JUNCTION_GRAMPA  agg_test agg agg_junction_grampa )
  JunctionExecutable( JUNCTION_LEAP    ins_test ins ins_junction_leap   )
  JunctionExecutable( JUNCTION_LEAP    mix_test mix mix_junction_leap   )
  JunctionExecutable( JUNCTION_LEAP    con_test con con_junction_leap   )
  JunctionExecutable( JUNCTION_LEAP    agg_test agg agg_junction_leap   )
endif()
